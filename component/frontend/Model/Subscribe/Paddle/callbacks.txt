Notes on callbacks I need to create

https://paddle.com/docs/reference-using-webhooks/

TODO - Recurring callbacks
https://paddle.com/docs/subscriptions-event-reference/

SubscriptionCreated
================================================================================
Fired when creating a recurring subscription. Only used to save the cancel_url and update_url.

cancel_url => same named field
update_url => same named field

Set contact flag to 3 to avoid emailing the user (Paddle will do it for us!).

SubscriptionUpdated
================================================================================
When a user switches subscription plans OR the price is updated (need info from Paddle).

status (CHECK THIS)
    active -- the price was updated
    trialing -- zero charge for now, I have changed the user to a trial or his bill date changed
    past_due -- failed recurring charge. Should not happen in this event! Stop processing.
    deleted -- canceled subscription. Should not happen in this event! Stop processing.
cancel_url => same named field
update_url => same named field
next_bill_date => publish_down should be this + 2 days
new_price => Should I store it in gross amount???
subscription_plan_id ==> If that changes the user has switched to a different subscription level. I will need to update the active subscription record with the new subscription level using the plan ID (can be either recurring or an upsell!) and create a canceled one (with enabled=1 for the plugins to run) with the previous record's information. Basically the same logic as renewing a subscription BUT with a level change as well.

Set contact flag to 3 to avoid emailing the user (Paddle will do it for us!).


SubscriptionPaymentSucceeded
================================================================================
Similar to PaymentSucceeded but we also need to call the recurring subscription logic to do the subscription record
switchover.
Effective publish_up is date and time or receipt. Effective publish_down is next_bill_date + 1 day.

balance_fee
balance_gross
balance_tax
checkout_id
country
initial_payment => 1 for the first payment, 0 otherwise. Message: "First payment"
instalments => Use it with initial_payment to construct a message. "Recurring payment #[INSTALMENTS]"
next_bill_date => publish_down (add one more day)
order_id => processor_key
payment_method
receipt_url
subscription_id

Set contact flag to 3 to avoid emailing the user (Paddle will do it for us!).


SubscriptionPaymentRefunded
================================================================================
Can be full, vat or partial.
Exact same logic as PaymentRefunded with a few extras:

initial_payment => 1 for the first payment, 0 otherwise. Message: "First payment"
instalments => Use it with initial_payment to construct a message. "Recurring payment #[INSTALMENTS]"

I just need to save the recurring payment installment message together with the refund message.


SubscriptionCancelled
================================================================================
The user cancels the subscription BUT does not get their money back for the last instalment.

status -- must be 'deleted'
cancellation_effective_date => publish_down

Set contact flag to 3 to avoid emailing the user.

We do not cancel the subscription immediately. Remember, the user is billed in advance of the billing cycle.


SubscriptionPaymentFailed
================================================================================
The recurring charge failed to process. It can be a soft failure (will retry) or hard failure (the subscription is canceled because of lack of funds).

status -- must be 'past_due'
hard_failure -- If 'true' no more attempts will be made. Set paystate to "X".
cancel_url => save to same named field
update_url => save to same named field
next_retry_date

If hard_failure == 'true' (STRING, NOT BOOLEAN!)
    Set paystate to 'X'
ElseIf component option on_past_due_pending == 1
    Set paystate to 'P'
    We should use _dontNotify since Paddle has emailed the client about the payment failure.
Else
    publish_down = next_retry_date + 1 day
    We should use _dontNotify since Paddle has emailed the client about the payment failure.


RECOVERY EMAILS
================================================================================
Same logic as subscription notification emails
First email: after 6 hours
Second email: after 18 hours
We record which email has been sent (0, 1, 2)
We also record a TOKEN which is used to enable the user account and access the Abandoned Payment (Message.abandoned) page.
Emails triggered via CRON job using a plugin. See how I am doing that in the notification emails plugin.
Recovery emails are only to be sent to subscriptions with paystate N and a non-empty payment_url.